import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import styles from "../styles/Home.module.css";
import Button from "react-bootstrap/Button";
import Navbar from "react-bootstrap/Navbar";
import Dropdown from "react-bootstrap/Dropdown";
import Alert from "react-bootstrap/Alert";
import axios from "axios";

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faGoogle, faStrava } from "@fortawesome/free-brands-svg-icons";

import { useSession, signIn, signOut, getSession } from "next-auth/react";
import { useEffect, useState } from "react";
import { FullStravaUser, GoogleProps } from "../utils/types";
import { addGoogleUser } from "../utils/crudAuth";
import { getGoogleUser } from "../utils/getGoogleUser";
import { updateUser } from "../utils/updateUser";

export default function StravaPage({ sessionData, googleUser }) {
  const router = useRouter();
  const { data: session, status } = useSession();
  const [postActivity, setPostActivity] = useState(1);
  const [mapOnly, setMapOnly] = useState(1);
  const [hasStravaConnected, setHasStavaConnected] = useState(false);

  const postActivitiesMap = {
    1: "Don't Share",
    2: "Runs & Rides",
    3: "Runs Only",
    4: "Rides Only",
  };

  const googleUserData: FullStravaUser = googleUser
    ? JSON.parse(googleUser)
    : null;

  useEffect(() => {
    if (googleUserData) {
      setPostActivity(googleUserData.postActivity);
      setMapOnly(googleUserData.mapOnly);
      setHasStavaConnected(googleUserData.accessToken ? true : false);
    }
  }, []);

  const handleChange = async (e) => {
    setPostActivity(e);

    try {
      const response = await axios.post(`/api/update`, { postActivity: e });
      console.log(response);
    } catch (err) {
      console.log(err);
    }
  };

  const disconnectStrava = async () => {
    setHasStavaConnected(false);

    try {
      const response = await axios.post(`/api/disconnect`);
      console.log(response);
    } catch (err) {
      setHasStavaConnected(true);
      console.log(err);
    }
  };

  const handleMapChange = async (e) => {
    setMapOnly(e);
    try {
      const response = await axios.post(`/api/update`, { mapOnly: e });
      console.log(response);
    } catch (err) {
      console.log(err);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Hipcamp Strava - Account</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar>
        <div className="container justify-content-between">
          <div className="font-weight-bold">Hipcamp Strava</div>
          <div className="d-flex align-items-center justify-content-end">
            <Button
              size="sm"
              variant="outline-primary"
              onClick={() => {
                signOut({ callbackUrl: `${process.env.NEXT_PUBLIC_BASE_URL}` });
              }}
            >
              Log Out
            </Button>
          </div>
        </div>
      </Navbar>

      <div className="d-flex justify-content-between"></div>

      <div className="container justify-content-center d-flex vertical-center">
        {router.query.error && (
          <Alert variant="danger" className="text-center">
            ðŸ”´ An error occurred when you tried to authenticate you with Strava.
            Please try again. ðŸ”´
          </Alert>
        )}

        <div className="d-flex justify-content-center mb-3">
          <img
            src={sessionData.user.image}
            width="100"
            height="100"
            className="mr-1 rounded-circle"
            alt={sessionData.user.name}
          />
        </div>
        <h1 className={styles.title}>ðŸ‘‹ Hello, {sessionData.user.name}!</h1>

        {router.query.success && (
          <Alert variant={"warning"} className="mt-3">
            <div className={styles.description}>
              ðŸ¥³ You did it! You have a linked your Strava account to Hipcamp
              Run Club! Now, every ride or run will be shared the the{" "}
              <span className="text-primary">#running-biking-club</span> Channel
              in Slack. You can configure this in the option below.
            </div>
          </Alert>
        )}

        <div className="container">
          {hasStravaConnected && (
            <div className="mt-3">
              <h3>Settings</h3>
              <div className="d-flex justify-content-between align-items-center">
                <div style={{ marginRight: 10 }}>Activites to Share</div>
                <Dropdown>
                  <Dropdown.Toggle variant="outline-primary">
                    {postActivitiesMap[postActivity]}
                  </Dropdown.Toggle>
                  <Dropdown.Menu>
                    {Object.keys(postActivitiesMap).map((keyName, keyIndex) => {
                      return (
                        <Dropdown.Item
                          key={keyIndex}
                          onClick={() => {
                            handleChange(keyName);
                          }}
                        >
                          {postActivitiesMap[keyName]}
                        </Dropdown.Item>
                      );
                    })}
                  </Dropdown.Menu>
                </Dropdown>
              </div>
              <hr />
              <div className="d-flex justify-content-between align-items-center mt-3">
                <div style={{ marginRight: 10 }}>
                  Share Rides & Runs Without a Map?
                </div>
                <Dropdown>
                  <Dropdown.Toggle variant="outline-primary">
                    {mapOnly === 1 ? "Yes" : "No"}
                  </Dropdown.Toggle>
                  <Dropdown.Menu>
                    <Dropdown.Item
                      onClick={() => {
                        handleMapChange(1);
                      }}
                    >
                      Yes
                    </Dropdown.Item>
                    <Dropdown.Item
                      onClick={() => {
                        handleMapChange(2);
                      }}
                    >
                      No
                    </Dropdown.Item>
                  </Dropdown.Menu>
                </Dropdown>
              </div>
            </div>
          )}
          {!hasStravaConnected && (
            <div className={styles.description}>
              To get started, tap the button below to authenticate your Strava
              account! When you link your account, all new rides and runs that
              you create on Strava, will be auto-published to{" "}
              <span className="text-primary">#running-biking-club</span> on
              Slack.
            </div>
          )}
        </div>

        {hasStravaConnected && (
          <div className="container mt-5">
            <h3>Connected Strava Account</h3>

            <div className="d-flex align-items-center justify-content-between">
              <div className="d-flex align-items-center">
                <div>
                  <img
                    src={googleUserData.avatar}
                    width="50"
                    height="50"
                    className="mr-1 rounded-circle"
                    alt={googleUserData.avatar}
                  />
                </div>
                <div className="mb-0 mx-3">
                  {googleUserData.name} ({googleUserData.userName})
                </div>
              </div>
              <Button
                variant="danger"
                onClick={() => {
                  disconnectStrava();
                }}
              >
                Disconnect
              </Button>
            </div>
          </div>
        )}
        {!hasStravaConnected && (
          <div className="d-flex justify-content-center">
            <Button
              className="strava-color d-flex align-items-center"
              size="lg"
              onClick={() => {
                router.push("/api/strava");
              }}
            >
              <div className="mr-5">
                <FontAwesomeIcon icon={faStrava} size={"lg"} className="mr-3" />
              </div>
              <div style={{ marginLeft: 10 }}>Connect with Strava</div>
            </Button>
          </div>
        )}
      </div>
    </div>
  );
}

export async function getServerSideProps(ctx) {
  try {
    const session = await getSession(ctx);

    if (session) {
      const userParams: GoogleProps = {
        accountId: session.userId as string,
        googleName: session.user.name,
        googleAvatar: session.user.image,
        email: session.user.email,
      };

      await addGoogleUser(userParams);

      const googleUser = await getGoogleUser(session.userId as string);

      return {
        props: {
          googleUser: JSON.stringify(googleUser),
          sessionData: session,
        },
      };
    } else {
      return {
        redirect: {
          permanent: false,
          destination: "/?loginRequired=true",
        },
      };
    }
  } catch (err) {
    console.log(err);
  }
}
